include utils.incl


<parameter in default="" message="input file name"/>
<parameter out  default="" message="output file name"/>

<input syntax="proj1.code" from=(in) to=input/>
<eval PRINT(input); />

<define PARSE CODE.Start/> 
<code Base/>
<code Base2/>
<code Stmt_list/>
<code Stmt_list2/>
<code Stmt/>
<code Conditional_stmt/>
<code Else_stmt/>
<code While_stmt/>
<code Compound_stmt/>
<code Decl_list/>
<code Decl_list2/>
<code Decl/>
<code Type_spec/>
<code Iden_list/>
<code Iden/>
<code Iden2/>
<code Array_ind/>
<code Exp/>
<code Exp2/>
<code Assign_exp/>
<code Assign_exp2/>
<code Logic_OR_exp/>
<code Logic_OR_exp2/>
<code Logic_AND_exp/>
<code Logic_AND_exp2/>
<code Equal_exp/>
<code Equal_exp2/>
<code Relation_exp/>
<code Rel_exp_lt/>
<code Rel_exp_gt/>
<code Rel_exp_lte/>
<code Rel_exp_gte/>
<code Add_exp/>
<code Add_exp_plus/>
<code Add_exp_minus/>
<code Mult_exp/>
<code Mult_exp_mul/>
<code Mult_exp_div/>
<code Unary_exp/>
<code Unary_exp2/>
<code Unary_op/>
<code Primary_exp/>
<code Paren_exp/>
<code Num/>
<code Value/>
<code ICONST/>
<code FCONST/>

<xform parseArray pars=(input)>
""
</xform>

<xform LookupVariable pars=(tables, name)>
if (!tables)
	RETURN "";
else
{
	table = car tables;
	ret = table[name];
	if (ret != "")
		RETURN ret;
	else
	{
		ret = LookupVariable(cdr tables, name);
		RETURN ret;
	}
}
</xform>

<eval
x = MAP;
XFORM.TypeChecking(input, x);
PRINT("PARSING COMPLETE - AST and error messages above (IF ANY)");
/>

<xform TypeChecking pars=(input, tables)>
switch(input)
{
   
case CODE.Compound_stmt#(CLEAR child):
   x = MAP;
   newtables = x :: tables; 	
   TypeChecking(child, newtables);
   BREAK;
   
case CODE.Decl#(CLEAR type, CLEAR name):
   t = car tables;
	for (; name; name=TAIL(name))
	{
		tempName = HEAD(name);
		tempName = tempName[Iden2.id];
		t[tempName] = type;
	}
   BREAK;
    
case CODE.Stmt_list#(CLEAR statement, CLEAR stmtList):
	TypeChecking(statement, tables);
	TypeChecking(stmtList, tables);	
	BREAK;
	
case CODE.Assign_exp#(CLEAR left, CLEAR right):
	varType = TypeChecking(left, tables);
	
	temp = TAIL(right);
	temp = HEAD(temp);
	valType = TypeChecking(temp, tables);
	if (valType == "")
		RETURN varType;
	else if (varType == "")
		RETURN valType;
	else if (valType != varType)
	{
	   PRINT("TYPE ERROR: " varType);
	   PRINT("MISMATCH: " valType);
	}
	RETURN varType;

case CODE.Stmt_list#(CLEAR left, CLEAR right):		
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Base2#(CLEAR left, CLEAR right):	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Exp#(CLEAR left, CLEAR right):	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Logic_OR_exp#(CLEAR left, CLEAR right):	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Logic_AND_exp#(CLEAR left, CLEAR right):	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Equal_exp#(CLEAR left, CLEAR right):	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Relation_exp#(CLEAR left, CLEAR right):	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(right, tables);
	RETURN leftType;
	
case CODE.Add_exp#(CLEAR left, CLEAR right):
	temp = TAIL(right);
	temp = HEAD(temp);	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(temp, tables);
	if (rightType == "")
		RETURN leftType;
	else
	{
		if (leftType == rightType)
			RETURN leftType;
		else
			{
				PRINT("TYPE ERROR");
				RETURN rightType;
			}
	}
	
case CODE.Mult_exp#(CLEAR left, CLEAR right):
	temp = TAIL(right);
	temp = HEAD(temp);	
	leftType = TypeChecking(left, tables);
	rightType = TypeChecking(temp, tables);
	if (rightType == "")
		RETURN leftType;
	else
	{
		if (leftType == rightType)
			RETURN leftType;
		else
			{
				PRINT("TYPE ERROR");
				RETURN rightType;
			}
	}
case CODE.Num#(CLEAR left, CLEAR right):
	leftSide = left[ICONST.v];
	rightSide = right[FCONST.v];
	if (rightSide == "")
		RETURN "int";
	else
		RETURN "float";
	
	
case CODE.Iden2#(CLEAR id, CLEAR array):
	name = id;
	ret = LookupVariable(tables, name);
	if (ret == "")
	{
		PRINT("NO VARIABLE OF THAT NAME EXISTS IN THIS SCOPE");
	}
	RETURN ret
	
	
	
default: ""

}
</xform>